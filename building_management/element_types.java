/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * analysers.java
 *
 * Created on Dec 8, 2011, 10:09:31 AM
 */

package building_management;

/**
 *
 * @author masdar
 */
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.Toolkit;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
public class element_types extends javax.swing.JFrame {

    Object[][] MyArray = null;
    String[] AttributeNames;
    connect conn;
    Statement stmt;
    JFrame invoke ;
    boolean state ;
    int selectedRow;
    int NumberOfRows, NumberOfColumns;
    private final Image img;
    String[] fields = {"desc_","unit_id"};
    String tableName = "elements_";
    String tableKey = "element_id";
    String query="SELECT  units.desc_ as \"الواحدة\","
            + " elements_.desc_ as \"اسم العنصر\""
          
            + "FROM elements_  "
            + "left join units on units.id_ =elements_.unit_id  ";

    public element_types(javax.swing.JFrame mainFram)throws SQLException {
         invoke =mainFram;
        invoke.setEnabled(false);
        initComponents();
        img = Toolkit.getDefaultToolkit().getImage(java.net.URLClassLoader.getSystemResource("icons/1.png"));

        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        int temp_width = (int) screenSize.getWidth();
        int temp_height = (int) screenSize.getHeight();
       // this.setMaximumSize(new Dimension(680, 530));
        this.setSize(353, 421);
        this.setLocation((temp_width - 353) / 2, (temp_height - 421) / 2);
        this.setIconImage(img);
        element.grabFocus();
        DataBaseTable.setVisible(false);
        conn = new connect();
        conn.newConnection();
        conn.fillComboBox("units", "desc_", unitsComboBox1);
      //  conn.fillComboBox("workers", "worker_name", WorkerComboBox2);
        try {
            // Class.forName("org.postgresql.Driver");

            java.sql.Statement s = conn.conn.createStatement();
            stmt = conn.conn.createStatement();
        } catch (Exception e) {
        }
        conn.QueryTable(query, DataBaseTable);

        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        DoQuery = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        DataBaseTable = new javax.swing.JTable();
        msg = new javax.swing.JLabel();
        deleteselected = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        element = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        unitsComboBox1 = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("الاحضارات");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        DoQuery.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        DoQuery.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Files-New-File-icon 24.png"))); // NOI18N
        DoQuery.setText("اضافة");
        DoQuery.setMargin(new java.awt.Insets(2, 2, 2, 2));
        DoQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DoQueryActionPerformed(evt);
            }
        });

        DataBaseTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null}
            },
            new String [] { ""}
        ) {
            Class[] types = new Class [] { java.lang.Object.class};
            boolean[]canEdit=new boolean[]{true};

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        DataBaseTable.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                DataBaseTableFocusLost(evt);
            }
        });
        DataBaseTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DataBaseTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(DataBaseTable);

        msg.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        msg.setForeground(new java.awt.Color(0, 102, 0));
        msg.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        msg.setToolTipText("");

        deleteselected.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        deleteselected.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/document-delete-icon24.png"))); // NOI18N
        deleteselected.setText("حذف");
        deleteselected.setToolTipText("حذف");
        deleteselected.setEnabled(false);
        deleteselected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteselectedActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("الواحدة");

        element.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        element.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                elementActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("اسم العنصر");

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/math-add-icon16.png"))); // NOI18N
        jButton1.setMargin(new java.awt.Insets(1, 1, 1, 1));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(msg, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(deleteselected))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(unitsComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(element, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3))
                            .addComponent(DoQuery))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(element, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(unitsComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2))
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(DoQuery, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(msg, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteselected))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void DoQueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DoQueryActionPerformed
      // if (Functions.editPrevilege) {

      if (!Functions.validation(element.getText(), 3, true)) {
            element.setBackground(Color.red);
            element.grabFocus();
            element.selectAll();
            showMessage("يجب ادخال العنصر",false);
            state = false;
            return;
        }
        

                 
        try {
            if(conn.checkUniqField("desc_",element.getText() , tableName))
            {
               
                showMessage("يوجد عنصر بنفس الإسم",false);
                return;
            }
           int unit_id = conn.getIDByDesc("units", unitsComboBox1.getSelectedItem().toString(), "desc_", "id_");


           
            String[] values = {"'" + element.getText()+"'",
                "'" + unit_id+"'"};
            
            
           conn.insertIntoTable(tableName, fields, values);
             
           conn.QueryTable(query, DataBaseTable);

       
        } catch (SQLException ex) {
            Logger.getLogger(element_types.class.getName()).log(Level.SEVERE, null, ex);
        }
                emptyFields();
                showMessage("تمت عملية الادخال بنجاح  ",true);
              
                // JOptionPane.showMessageDialog ( null, "تمت عملية الادخال بنجاح  " );
                //showMessage("تمت عملية الحفظ بنجاح", true);
         //   }
         
    }//GEN-LAST:event_DoQueryActionPerformed
    
    private void DataBaseTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DataBaseTableMouseClicked
 // TODO add your handling code here:
        deleteselected.setEnabled(true);        // TODO add your handling code here:
    }//GEN-LAST:event_DataBaseTableMouseClicked

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        
       invoke.setEnabled(true);
           invoke.toFront();
       
    }//GEN-LAST:event_formWindowClosed

    private void DataBaseTableFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_DataBaseTableFocusLost
    // TODO add your handling code here:
    }//GEN-LAST:event_DataBaseTableFocusLost

    private void deleteselectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteselectedActionPerformed
         selectedRow = DataBaseTable.getSelectedRow();
          if(selectedRow<0)
        {
            showMessage("يجب تحديد سطر لحذفه",false);
                return;
        }
        String valueIndex = DataBaseTable.getValueAt(selectedRow, 1).toString();
//if(Functions.deletePrevilege){
        String id = "";

        try {

            id = conn.searchIdwithcondition(tableName, tableKey, "desc_", valueIndex);
        } catch (SQLException ex) {
            Logger.getLogger(element_types.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (!id.equals("")) {

                   try {
                conn.deleteFromTable(tableName, tableKey, id);
               // conn.updateTable(tableName, fieldsToUpdate, valuefields, tableKey, id);

            } catch (SQLException ex) {
                  showMessage("يوجد معلومات مرتبطة بهذا العنصر ولايمكن حذفه", false);
                return;
            }
        }
        conn.QueryTable(query, DataBaseTable);

        emptyFields();

        showMessage("تمت عملية الحذف  بنجاح  ", true);
        deleteselected.setEnabled(false);
    }//GEN-LAST:event_deleteselectedActionPerformed

    private void elementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_elementActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_elementActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try{
            new units_manager(this).setVisible(true);

        }catch(SQLException e)
        {

        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
  
        try {
            conn.fillComboBox("units", "desc_", unitsComboBox1);
      }catch(SQLException e)
        {

        }
        
    }//GEN-LAST:event_formWindowActivated

    private void emptyFields() {
               element.setText("");
       
       }

  private void showMessage(String message, boolean state) {
        if (state) {
            msg.setForeground(Color.GREEN);

        } else {
            msg.setForeground(Color.red);
        }
        msg.setText(message);
    }

   /* private void showMessage(String msg, boolean state) {
        if (state) {
            messages.setForeground(Color.GREEN);

        } else {
            messages.setForeground(Color.red);
        }
        messages.setText(msg);
    }*/
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable DataBaseTable;
    private javax.swing.JButton DoQuery;
    private javax.swing.JButton deleteselected;
    private javax.swing.JTextField element;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel msg;
    private javax.swing.JComboBox unitsComboBox1;
    // End of variables declaration//GEN-END:variables

}
